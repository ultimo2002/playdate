name: Pipeline

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Create .env file
        run: |
          echo "${{ secrets.DOTENV }}" > code/.env
          echo "${{ secrets.DOTENV }}" > .env
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Run tests
        run: |
          PYTHONPATH=.. pytest -v

      # Log in to DigitalOcean Container Registry
      - name: Log in to DigitalOcean
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          DIGITALOCEAN_USERNAME: ${{ github.actor }}
        run: |
          echo "${DIGITALOCEAN_ACCESS_TOKEN}" | docker login registry.digitalocean.com -u "${DIGITALOCEAN_USERNAME}" --password-stdin

      # Install doctl to interact with the DigitalOcean API
      - name: Install doctl
        run: |
          curl -sL https://github.com/digitalocean/doctl/releases/download/v1.87.0/doctl-1.87.0-linux-amd64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin

      # Authenticate doctl with DigitalOcean API
      - name: Authenticate doctl with DigitalOcean API
        run: |
          echo "${{ secrets.DIGITALOCEAN_API_TOKEN }}" | doctl auth init --access-token

      # Clean up old images in DigitalOcean Registry
      - name: Clean up old images in DigitalOcean Registry
        run: |
          REPO="timots/fast-api"
          
          # Get a list of all tags in the DigitalOcean registry
          TAGS=$(doctl registry repository list-tags registry.digitalocean.com/$REPO --format "Tag" --no-header | sort -r)

          # Keep the most recent image and delete the rest
          TAGS_TO_DELETE=$(echo "$TAGS" | tail -n +2)
          
          # Loop through the tags to delete
          for TAG in $TAGS_TO_DELETE; do
            doctl registry repository delete-tag registry.digitalocean.com/$REPO --tag $TAG --force
          done

      # Build Docker image with Git commit hash as tag
      - name: Build Docker image
        env:
          COMMIT_HASH: ${{ github.sha }}
        run: |
          docker build -t registry.digitalocean.com/timots/fast-api:${COMMIT_HASH} -t registry.digitalocean.com/devops-cicd/fast-api:latest .

      # Push Docker image to DigitalOcean
      - name: Push Docker image to DigitalOcean
        env:
          COMMIT_HASH: ${{ github.sha }}
        run: |
          docker push --all-tags registry.digitalocean.com/timots/fast-api

      # Set up kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
            version: 'latest'

      # Configure kubeconfig
      - name: Configure kubeconfig
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}
        run: |
              mkdir -p $HOME/.kube
              echo "${KUBE_CONFIG_DATA}"
              echo "${KUBE_CONFIG_DATA}" > $HOME/.kube/config

      # Update Deployment with New Image
      - name: Update Deployment with New Image
        env:
          COMMIT_HASH: ${{ github.sha }}
        run: |
            kubectl set image deployment/website website=registry.digitalocean.com/timots/fast-api:${COMMIT_HASH} -n fastapi-app
